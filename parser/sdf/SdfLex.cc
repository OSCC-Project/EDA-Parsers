// ***************************************************************************************
// Copyright (c) 2023-2025 Peng Cheng Laboratory
// Copyright (c) 2023-2025 Institute of Computing Technology, Chinese Academy of Sciences
// Copyright (c) 2023-2025 Beijing Institute of Open Source Chip
//
// iEDA is licensed under Mulan PSL v2.
// You can use this software according to the terms and conditions of the Mulan PSL v2.
// You may obtain a copy of Mulan PSL v2 at:
// http://license.coscl.org.cn/MulanPSL2
//
// THIS SOFTWARE IS PROVIDED ON AN "AS IS" BASIS, WITHOUT WARRANTIES OF ANY KIND,
// EITHER EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO NON-INFRINGEMENT,
// MERCHANTABILITY OR FIT FOR A PARTICULAR PURPOSE.
//
// See the Mulan PSL v2 for more details.
// ***************************************************************************************
#line 2 "/Project/home/chenshijian/iEDA/src/iSTA/sdf-parser/SdfLex.cc"

#line 4 "/Project/home/chenshijian/iEDA/src/iSTA/sdf-parser/SdfLex.cc"

#define YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define yy_create_buffer Sdf__create_buffer
#define yy_delete_buffer Sdf__delete_buffer
#define yy_scan_buffer Sdf__scan_buffer
#define yy_scan_string Sdf__scan_string
#define yy_scan_bytes Sdf__scan_bytes
#define yy_init_buffer Sdf__init_buffer
#define yy_flush_buffer Sdf__flush_buffer
#define yy_load_buffer_state Sdf__load_buffer_state
#define yy_switch_to_buffer Sdf__switch_to_buffer
#define yypush_buffer_state Sdf_push_buffer_state
#define yypop_buffer_state Sdf_pop_buffer_state
#define yyensure_buffer_stack Sdf_ensure_buffer_stack
#define yy_flex_debug Sdf__flex_debug
#define yyin Sdf_in
#define yyleng Sdf_leng
#define yylex Sdf_lex
#define yylineno Sdf_lineno
#define yyout Sdf_out
#define yyrestart Sdf_restart
#define yytext Sdf_text
#define yywrap Sdf_wrap
#define yyalloc Sdf_alloc
#define yyrealloc Sdf_realloc
#define yyfree Sdf_free

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

#ifdef yy_create_buffer
#define Sdf__create_buffer_ALREADY_DEFINED
#else
#define yy_create_buffer Sdf__create_buffer
#endif

#ifdef yy_delete_buffer
#define Sdf__delete_buffer_ALREADY_DEFINED
#else
#define yy_delete_buffer Sdf__delete_buffer
#endif

#ifdef yy_scan_buffer
#define Sdf__scan_buffer_ALREADY_DEFINED
#else
#define yy_scan_buffer Sdf__scan_buffer
#endif

#ifdef yy_scan_string
#define Sdf__scan_string_ALREADY_DEFINED
#else
#define yy_scan_string Sdf__scan_string
#endif

#ifdef yy_scan_bytes
#define Sdf__scan_bytes_ALREADY_DEFINED
#else
#define yy_scan_bytes Sdf__scan_bytes
#endif

#ifdef yy_init_buffer
#define Sdf__init_buffer_ALREADY_DEFINED
#else
#define yy_init_buffer Sdf__init_buffer
#endif

#ifdef yy_flush_buffer
#define Sdf__flush_buffer_ALREADY_DEFINED
#else
#define yy_flush_buffer Sdf__flush_buffer
#endif

#ifdef yy_load_buffer_state
#define Sdf__load_buffer_state_ALREADY_DEFINED
#else
#define yy_load_buffer_state Sdf__load_buffer_state
#endif

#ifdef yy_switch_to_buffer
#define Sdf__switch_to_buffer_ALREADY_DEFINED
#else
#define yy_switch_to_buffer Sdf__switch_to_buffer
#endif

#ifdef yypush_buffer_state
#define Sdf_push_buffer_state_ALREADY_DEFINED
#else
#define yypush_buffer_state Sdf_push_buffer_state
#endif

#ifdef yypop_buffer_state
#define Sdf_pop_buffer_state_ALREADY_DEFINED
#else
#define yypop_buffer_state Sdf_pop_buffer_state
#endif

#ifdef yyensure_buffer_stack
#define Sdf_ensure_buffer_stack_ALREADY_DEFINED
#else
#define yyensure_buffer_stack Sdf_ensure_buffer_stack
#endif

#ifdef yylex
#define Sdf_lex_ALREADY_DEFINED
#else
#define yylex Sdf_lex
#endif

#ifdef yyrestart
#define Sdf_restart_ALREADY_DEFINED
#else
#define yyrestart Sdf_restart
#endif

#ifdef yylex_init
#define Sdf_lex_init_ALREADY_DEFINED
#else
#define yylex_init Sdf_lex_init
#endif

#ifdef yylex_init_extra
#define Sdf_lex_init_extra_ALREADY_DEFINED
#else
#define yylex_init_extra Sdf_lex_init_extra
#endif

#ifdef yylex_destroy
#define Sdf_lex_destroy_ALREADY_DEFINED
#else
#define yylex_destroy Sdf_lex_destroy
#endif

#ifdef yyget_debug
#define Sdf_get_debug_ALREADY_DEFINED
#else
#define yyget_debug Sdf_get_debug
#endif

#ifdef yyset_debug
#define Sdf_set_debug_ALREADY_DEFINED
#else
#define yyset_debug Sdf_set_debug
#endif

#ifdef yyget_extra
#define Sdf_get_extra_ALREADY_DEFINED
#else
#define yyget_extra Sdf_get_extra
#endif

#ifdef yyset_extra
#define Sdf_set_extra_ALREADY_DEFINED
#else
#define yyset_extra Sdf_set_extra
#endif

#ifdef yyget_in
#define Sdf_get_in_ALREADY_DEFINED
#else
#define yyget_in Sdf_get_in
#endif

#ifdef yyset_in
#define Sdf_set_in_ALREADY_DEFINED
#else
#define yyset_in Sdf_set_in
#endif

#ifdef yyget_out
#define Sdf_get_out_ALREADY_DEFINED
#else
#define yyget_out Sdf_get_out
#endif

#ifdef yyset_out
#define Sdf_set_out_ALREADY_DEFINED
#else
#define yyset_out Sdf_set_out
#endif

#ifdef yyget_leng
#define Sdf_get_leng_ALREADY_DEFINED
#else
#define yyget_leng Sdf_get_leng
#endif

#ifdef yyget_text
#define Sdf_get_text_ALREADY_DEFINED
#else
#define yyget_text Sdf_get_text
#endif

#ifdef yyget_lineno
#define Sdf_get_lineno_ALREADY_DEFINED
#else
#define yyget_lineno Sdf_get_lineno
#endif

#ifdef yyset_lineno
#define Sdf_set_lineno_ALREADY_DEFINED
#else
#define yyset_lineno Sdf_set_lineno
#endif

#ifdef yywrap
#define Sdf_wrap_ALREADY_DEFINED
#else
#define yywrap Sdf_wrap
#endif

#ifdef yyalloc
#define Sdf_alloc_ALREADY_DEFINED
#else
#define yyalloc Sdf_alloc
#endif

#ifdef yyrealloc
#define Sdf_realloc_ALREADY_DEFINED
#else
#define yyrealloc Sdf_realloc
#endif

#ifdef yyfree
#define Sdf_free_ALREADY_DEFINED
#else
#define yyfree Sdf_free
#endif

#ifdef yytext
#define Sdf_text_ALREADY_DEFINED
#else
#define yytext Sdf_text
#endif

#ifdef yyleng
#define Sdf_leng_ALREADY_DEFINED
#else
#define yyleng Sdf_leng
#endif

#ifdef yyin
#define Sdf_in_ALREADY_DEFINED
#else
#define yyin Sdf_in
#endif

#ifdef yyout
#define Sdf_out_ALREADY_DEFINED
#else
#define yyout Sdf_out
#endif

#ifdef yy_flex_debug
#define Sdf__flex_debug_ALREADY_DEFINED
#else
#define yy_flex_debug Sdf__flex_debug
#endif

#ifdef yylineno
#define Sdf_lineno_ALREADY_DEFINED
#else
#define yylineno Sdf_lineno
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <errno.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined(__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types.
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t;
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN (-32767 - 1)
#endif
#ifndef INT32_MIN
#define INT32_MIN (-2147483647 - 1)
#endif
#ifndef INT8_MAX
#define INT8_MAX (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX (~(size_t) 0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) -1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart(yyin)
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the
 * main buffer.
 */
#define YY_STATE_BUF_SIZE ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state* YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern int yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

#define YY_LESS_LINENO(n)
#define YY_LINENO_REWIND_TO(ptr)

/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n)                                                                           \
  do {                                                                                      \
    /* Undo effects of setting up yytext. */                                                \
    int yyless_macro_arg = (n);                                                             \
    YY_LESS_LINENO(yyless_macro_arg);                                                       \
    *yy_cp = (yy_hold_char);                                                                \
    YY_RESTORE_YY_MORE_OFFSET(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
    YY_DO_BEFORE_ACTION; /* set up yytext again */                                          \
  } while (0)
#define unput(c) yyunput(c, (yytext_ptr))

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
{
  FILE* yy_input_file;

  char* yy_ch_buf;  /* input buffer */
  char* yy_buf_pos; /* current position in input buffer */

  /* Size of input buffer in bytes, not including room for EOB
   * characters.
   */
  int yy_buf_size;

  /* Number of characters read into yy_ch_buf, not including EOB
   * characters.
   */
  int yy_n_chars;

  /* Whether we "own" the buffer - i.e., we know we created it,
   * and can realloc() it to grow it, and should free() it to
   * delete it.
   */
  int yy_is_our_buffer;

  /* Whether this is an "interactive" input source; if so, and
   * if we're using stdio for input, then we want to use getc()
   * instead of fread(), to make sure we stop fetching input after
   * each newline.
   */
  int yy_is_interactive;

  /* Whether we're considered to be at the beginning of a line.
   * If so, '^' rules will be active on the next match, otherwise
   * not.
   */
  int yy_at_bol;

  int yy_bs_lineno; /**< The line count. */
  int yy_bs_column; /**< The column count. */

  /* Whether to try to fill the input buffer when we reach the
   * end of it.
   */
  int yy_fill_buffer;

  int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
  /* When an EOF's been seen but there's still some text to process
   * then we mark the buffer as YY_EOF_PENDING, to indicate that we
   * shouldn't try reading from the input source any more.  We might
   * still have a bunch of tokens to match, though, because of
   * possible backing-up.
   *
   * When we actually see the EOF, we change the status to "new"
   * (via yyrestart()), so that the user can continue scanning by
   * just pointing yyin at a new input file.
   */
#define YY_BUFFER_EOF_PENDING 2
};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0;          /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0;          /**< capacity of stack. */
static YY_BUFFER_STATE* yy_buffer_stack = NULL; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ((yy_buffer_stack) ? (yy_buffer_stack)[(yy_buffer_stack_top)] : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars; /* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char* yy_c_buf_p = NULL;
static int yy_init = 0;  /* whether we need to initialize */
static int yy_start = 0; /* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart(FILE* input_file);
void yy_switch_to_buffer(YY_BUFFER_STATE new_buffer);
YY_BUFFER_STATE yy_create_buffer(FILE* file, int size);
void yy_delete_buffer(YY_BUFFER_STATE b);
void yy_flush_buffer(YY_BUFFER_STATE b);
void yypush_buffer_state(YY_BUFFER_STATE new_buffer);
void yypop_buffer_state(void);

static void yyensure_buffer_stack(void);
static void yy_load_buffer_state(void);
static void yy_init_buffer(YY_BUFFER_STATE b, FILE* file);
#define YY_FLUSH_BUFFER yy_flush_buffer(YY_CURRENT_BUFFER)

YY_BUFFER_STATE yy_scan_buffer(char* base, yy_size_t size);
YY_BUFFER_STATE yy_scan_string(const char* yy_str);
YY_BUFFER_STATE yy_scan_bytes(const char* bytes, int len);

void* yyalloc(yy_size_t);
void* yyrealloc(void*, yy_size_t);
void yyfree(void*);

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive)                            \
  {                                                                   \
    if (!YY_CURRENT_BUFFER) {                                         \
      yyensure_buffer_stack();                                        \
      YY_CURRENT_BUFFER_LVALUE = yy_create_buffer(yyin, YY_BUF_SIZE); \
    }                                                                 \
    YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive;     \
  }
#define yy_set_bol(at_bol)                                            \
  {                                                                   \
    if (!YY_CURRENT_BUFFER) {                                         \
      yyensure_buffer_stack();                                        \
      YY_CURRENT_BUFFER_LVALUE = yy_create_buffer(yyin, YY_BUF_SIZE); \
    }                                                                 \
    YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol;                     \
  }
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define Sdf_wrap() (/*CONSTCOND*/ 1)
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;

FILE *yyin = NULL, *yyout = NULL;

typedef int yy_state_type;

extern int yylineno;
int yylineno = 1;

extern char* yytext;
#ifdef yytext_ptr
#undef yytext_ptr
#endif
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state(void);
static yy_state_type yy_try_NUL_trans(yy_state_type current_state);
static int yy_get_next_buffer(void);
static void yynoreturn yy_fatal_error(const char* msg);

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION       \
  (yytext_ptr) = yy_bp;           \
  yyleng = (int) (yy_cp - yy_bp); \
  (yy_hold_char) = *yy_cp;        \
  *yy_cp = '\0';                  \
  (yy_c_buf_p) = yy_cp;
#define YY_NUM_RULES 60
#define YY_END_OF_BUFFER 61
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
{
  flex_int32_t yy_verify;
  flex_int32_t yy_nxt;
};
static const flex_int16_t yy_accept[290] = {
    0,  10, 10, 0,  0,  0,  0,  0,  0,  61, 59, 58, 57, 58, 5,  11, 10, 11, 11, 10, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55,
    59, 55, 55, 3,  4,  3,  3,  8,  60, 7,  8,  54, 53, 53, 51, 57, 0,  10, 0,  10, 1,  0,  0,  55, 55, 0,  55, 55, 55, 55, 55, 0,  10, 55,
    55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 4,  2,  6,  0,  0,  0,  0,  0,  10, 0,  9,  0,  56, 0,  55,

    55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 0,  52, 0,  0,
    0,  56, 0,  55, 13, 49, 15, 55, 55, 55, 55, 21, 55, 55, 55, 55, 55, 55, 28, 55, 55, 55, 55, 55, 55, 55, 55, 38, 55, 55, 55, 55, 55, 55,
    55, 55, 55, 0,  55, 55, 55, 16, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 36, 55, 55, 55, 55, 55, 55, 45,

    55, 55, 0,  55, 55, 55, 55, 18, 19, 55, 55, 55, 55, 25, 55, 27, 55, 55, 55, 32, 55, 34, 55, 55, 55, 55, 55, 42, 55, 55, 55, 55, 0,  55,
    55, 55, 55, 20, 55, 55, 55, 55, 29, 30, 55, 33, 55, 55, 55, 55, 55, 43, 44, 46, 47, 50, 12, 14, 48, 55, 55, 23, 55, 26, 31, 55, 55, 55,
    55, 55, 17, 22, 55, 55, 37, 55, 40, 55, 55, 55, 35, 55, 55, 22, 55, 39, 41, 24, 0};

static const YY_CHAR yy_ec[256]
    = {0,  1,  1,  1,  1,  1,  1,  1,  2,  2,  3,  1,  1,  4,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 1,  1, 1,  1,  1,  2,  1,
       5,  1,  1,  1,  1,  1,  6,  7,  8,  9,  10, 11, 12, 13, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 15, 16, 1, 17, 1, 1,  1,  18, 19, 20,
       21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 27, 34, 35, 36, 37, 38, 39, 27, 40, 27, 41, 42, 43, 1, 27, 1, 27, 27, 27, 44,

       45, 27, 46, 27, 27, 27, 27, 27, 27, 47, 48, 49, 27, 27, 50, 27, 27, 27, 27, 27, 27, 27, 51, 52, 53, 1,  1, 1,  1, 1,  1,  1,  1,  1,
       1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 1,  1, 1,  1,  1,  1,  1,
       1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 1,  1, 1,  1,  1,

       1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 1,  1, 1,  1,  1,  1,  1,
       1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1};

static const YY_CHAR yy_meta[54] = {0, 1, 2, 3, 2, 1, 1, 4, 1, 1, 1, 1, 5, 5, 6, 1, 1, 1, 7, 7, 7, 7, 7, 7, 7, 7, 7,
                                    7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 6, 7, 6, 7, 7, 7, 7, 7, 7, 7, 1, 1, 1};

static const flex_int16_t yy_base[301]
    = {0,    0,    0,    51,   53,   55,   59,   63,   68,   233,  1391, 1391, 1391, 212,  1391, 1391, 61,   197,  55,   64,   68,
       72,   76,   78,   110,  99,   103,  114,  116,  120,  142,  127,  153,  131,  0,    147,  155,  1391, 1391, 205,  194,  1391,
       1391, 1391, 0,    1391, 174,  177,  91,   1391, 182,  91,   68,   85,   1391, 168,  144,  170,  175,  219,  189,  201,  225,
       227,  235,  160,  232,  237,  240,  245,  268,  251,  271,  277,  282,  284,  279,  286,  304,  310,  317,  291,  323,  319,
       325,  330,  1391, 1391, 1391, 351,  366,  408,  196,  129,  137,  187,  1391, 190,  337,  461,  344,

       362,  384,  365,  370,  415,  422,  467,  389,  350,  469,  473,  476,  478,  484,  486,  511,  495,  504,  488,  520,  526,
       528,  531,  535,  538,  543,  553,  562,  387,  442,  202,  1391, 579,  621,  114,  559,  674,  578,  575,  581,  593,  600,
       635,  644,  597,  602,  675,  650,  681,  686,  653,  688,  690,  692,  695,  697,  699,  706,  730,  733,  737,  739,  741,
       745,  747,  752,  756,  749,  761,  764,  780,  119,  783,  787,  789,  792,  797,  799,  801,  820,  804,  824,  835,  839,
       842,  844,  846,  856,  859,  862,  878,  880,  870,  884,  887,  893,  890,  898,  903,  921,

       924,  926,  89,   929,  931,  934,  936,  938,  940,  943,  945,  971,  947,  962,  981,  983,  985,  987,  990,  994,  997,
       999,  1002, 1006, 1022, 1033, 1030, 1018, 1040, 1043, 1045, 1049, 77,   1054, 1056, 1061, 1068, 1076, 1080, 1087, 1089, 1092,
       1094, 1100, 1103, 1111, 1113, 1115, 1120, 1125, 1134, 1128, 1136, 1138, 1148, 1391, 1151, 1153, 1156, 1159, 1161, 1170, 1173,
       1175, 1179, 1187, 1193, 1195, 1198, 1211, 1213, 1218, 1226, 1215, 1229, 1231, 1237, 1239, 1249, 1254, 1251, 1263, 1270, 1257,
       1274, 1276, 1282, 1288, 1391, 1330, 1337, 1344, 1347, 1354, 1361, 1367, 1374, 85,   1380, 1383

};

static const flex_int16_t yy_def[301]
    = {0,   289, 1,   290, 290, 291, 291, 292, 292, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 293, 293, 293, 293, 293, 293,
       293, 293, 293, 293, 293, 293, 293, 293, 294, 293, 293, 289, 289, 289, 289, 289, 289, 289, 295, 289, 296, 296, 289, 289, 289, 289,
       289, 289, 289, 297, 298, 293, 293, 293, 293, 293, 293, 293, 293, 289, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293,
       293, 293, 293, 293, 293, 293, 293, 293, 289, 289, 289, 296, 299, 296, 289, 289, 289, 297, 289, 297, 300, 298, 293,

       293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293,
       293, 293, 293, 293, 289, 289, 299, 299, 289, 300, 300, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293,
       293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 289, 293, 293, 293, 293, 293, 293,
       293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293,

       293, 293, 289, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293,
       293, 293, 293, 293, 293, 293, 289, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293,
       293, 293, 293, 289, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293,
       293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 0,   289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289

};

static const flex_int16_t yy_nxt[1445]
    = {0,   10,  11,  12,  13,  14,  15,  15,  15,  16,  15,  16,  17,  18,  19,  15,  15,  15,  20,  21,  22,  23,  24,  21,  21,  25,
       26,  21,  21,  21,  21,  27,  21,  28,  29,  30,  31,  21,  32,  33,  21,  15,  34,  15,  21,  24,  21,  35,  21,  36,  21,  15,
       15,  15,  38,  39,  38,  39,  42,  40,  43,  40,  42,  54,  43,  46,  47,  46,  55,  48,  46,  47,  46,  50,  48,  51,  50,  65,
       51,  65,  56,  56,  94,  52,  56,  56,  52,  58,  56,  56,  56,  56,  98,  92,  92,  92,  62,  44,  60,  53,  63,

       44,  256, 50,  64,  51,  52,  52,  61,  52,  59,  56,  56,  52,  59,  56,  56,  93,  59,  65,  59,  65,  56,  56,  66,  233, 56,
       56,  56,  56,  52,  67,  56,  56,  68,  69,  52,  203, 71,  56,  56,  59,  74,  56,  56,  59,  70,  172, 72,  78,  73,  94,  59,
       79,  56,  56,  59,  82,  59,  56,  56,  135, 59,  75,  76,  56,  56,  56,  56,  59,  77,  96,  97,  59,  94,  80,  89,  89,  89,
       89,  89,  89,  56,  56,  59,  81,  99,  56,  56,  59,  96,  97,  84,  96,  97,  59,  53,  59,  92,  92,  92,

       56,  56,  85,  131, 131, 131, 87,  86,  132, 100, 53,  59,  56,  56,  49,  91,  59,  101, 91,  57,  57,  93,  57,  57,  57,  57,
       57,  57,  57,  57,  59,  102, 289, 57,  57,  57,  56,  56,  56,  56,  289, 289, 59,  56,  56,  66,  56,  56,  56,  56,  289, 56,
       56,  289, 289, 104, 56,  56,  289, 109, 103, 105, 56,  56,  106, 108, 59,  289, 59,  57,  57,  57,  107, 59,  110, 111, 59,  112,
       59,  56,  56,  59,  56,  56,  114, 289, 59,  113, 56,  56,  56,  56,  59,  56,  56,  56,  56,  56,  56,  289,

       289, 117, 56,  56,  115, 289, 120, 122, 116, 59,  289, 118, 59,  289, 121, 56,  56,  119, 59,  127, 59,  56,  56,  59,  289, 59,
       289, 59,  56,  56,  56,  56,  59,  123, 56,  56,  56,  56,  289, 124, 289, 56,  56,  128, 289, 59,  289, 125, 56,  56,  126, 59,
       89,  89,  89,  56,  56,  289, 59,  289, 59,  56,  56,  289, 59,  289, 59,  131, 131, 131, 129, 59,  132, 56,  56,  138, 56,  56,
       137, 130, 289, 56,  56,  147, 289, 59,  141, 142, 289, 289, 139, 59,  91,  289, 289, 56,  56,  289, 56,  56,

       56,  56,  289, 59,  140, 289, 59,  134, 90,  146, 289, 59,  90,  90,  90,  90,  90,  90,  90,  90,  90,  90,  90,  90,  90,  59,
       56,  56,  59,  289, 59,  170, 289, 56,  56,  289, 289, 289, 289, 289, 143, 289, 289, 289, 289, 289, 289, 144, 90,  289, 90,  289,
       289, 56,  56,  289, 59,  289, 90,  90,  90,  98,  98,  59,  98,  98,  98,  98,  98,  98,  98,  98,  98,  98,  98,  98,  98,  98,
       56,  56,  56,  56,  289, 59,  56,  56,  171, 56,  56,  56,  56,  289, 145, 150, 149, 56,  56,  56,  56,  56,

       56,  98,  151, 98,  148, 159, 56,  56,  59,  152, 59,  98,  98,  98,  59,  56,  56,  59,  289, 59,  289, 153, 56,  56,  289, 59,
       156, 59,  157, 59,  154, 56,  56,  289, 155, 158, 59,  56,  56,  56,  56,  289, 56,  56,  289, 59,  56,  56,  289, 56,  56,  289,
       59,  289, 56,  56,  164, 160, 166, 289, 165, 59,  161, 163, 56,  56,  162, 59,  289, 59,  56,  56,  59,  56,  56,  289, 59,  167,
       289, 59,  131, 131, 131, 289, 59,  132, 56,  56,  168, 56,  56,  289, 56,  56,  59,  289, 289, 169, 289, 289,

       137, 289, 175, 59,  56,  56,  173, 289, 56,  56,  174, 56,  56,  56,  56,  289, 59,  179, 289, 59,  134, 133, 59,  289, 289, 133,
       133, 289, 133, 133, 133, 133, 133, 133, 59,  133, 133, 133, 59,  176, 289, 59,  289, 59,  289, 289, 56,  56,  289, 289, 289, 289,
       289, 289, 289, 56,  56,  289, 177, 289, 289, 56,  56,  178, 56,  56,  289, 181, 289, 289, 184, 133, 133, 133, 136, 136, 59,  136,
       136, 136, 136, 136, 136, 136, 136, 59,  56,  56,  136, 136, 136, 59,  56,  56,  59,  289, 180, 56,  56,  56,

       56,  56,  56,  56,  56,  289, 56,  56,  56,  56,  56,  56,  289, 186, 182, 289, 59,  56,  56,  185, 189, 183, 59,  289, 136, 136,
       136, 59,  187, 59,  289, 59,  289, 59,  188, 289, 59,  289, 59,  289, 59,  56,  56,  190, 56,  56,  289, 59,  56,  56,  56,  56,
       56,  56,  192, 191, 56,  56,  56,  56,  56,  56,  194, 56,  56,  289, 199, 56,  56,  193, 289, 59,  56,  56,  59,  56,  56,  196,
       59,  195, 59,  198, 59,  197, 289, 200, 59,  289, 59,  289, 59,  56,  56,  59,  56,  56,  289, 59,  56,  56,

       56,  56,  59,  56,  56,  59,  289, 201, 56,  56,  56,  56,  56,  56,  207, 56,  56,  206, 289, 204, 209, 59,  210, 202, 59,  289,
       205, 208, 59,  289, 59,  56,  56,  59,  212, 56,  56,  289, 59,  289, 59,  289, 59,  213, 289, 59,  56,  56,  289, 211, 56,  56,
       289, 56,  56,  56,  56,  56,  56,  214, 289, 59,  216, 218, 289, 59,  289, 56,  56,  215, 56,  56,  289, 56,  56,  289, 59,  219,
       217, 221, 59,  56,  56,  59,  289, 59,  289, 59,  220, 56,  56,  56,  56,  289, 224, 56,  56,  59,  56,  56,

       59,  56,  56,  59,  56,  56,  226, 289, 222, 56,  56,  59,  289, 223, 56,  56,  227, 225, 289, 59,  289, 59,  289, 228, 289, 59,
       230, 289, 59,  229, 289, 59,  56,  56,  59,  56,  56,  56,  56,  59,  56,  56,  56,  56,  59,  56,  56,  56,  56,  56,  56,  56,
       56,  289, 56,  56,  56,  56,  56,  56,  289, 237, 59,  235, 234, 59,  239, 59,  236, 231, 59,  232, 59,  56,  56,  59,  238, 59,
       241, 59,  289, 59,  56,  56,  59,  289, 59,  289, 59,  289, 240, 289, 56,  56,  56,  56,  56,  56,  56,  56,

       289, 56,  56,  59,  242, 56,  56,  289, 56,  56,  56,  56,  59,  56,  56,  289, 244, 56,  56,  243, 289, 289, 59,  245, 59,  246,
       59,  289, 59,  56,  56,  59,  289, 56,  56,  59,  247, 248, 59,  249, 59,  56,  56,  59,  56,  56,  289, 59,  289, 251, 250, 56,
       56,  289, 56,  56,  56,  56,  289, 59,  56,  56,  289, 59,  253, 56,  56,  56,  56,  289, 252, 59,  56,  56,  59,  257, 289, 258,
       289, 56,  56,  59,  259, 289, 59,  289, 59,  56,  56,  254, 59,  56,  56,  255, 289, 59,  260, 59,  56,  56,

       56,  56,  59,  56,  56,  56,  56,  289, 262, 59,  261, 56,  56,  264, 56,  56,  289, 59,  289, 263, 289, 59,  56,  56,  56,  56,
       56,  56,  59,  289, 59,  56,  56,  59,  289, 59,  56,  56,  266, 56,  56,  59,  265, 267, 59,  56,  56,  56,  56,  56,  56,  289,
       59,  269, 59,  268, 59,  289, 270, 56,  56,  59,  56,  56,  56,  56,  59,  56,  56,  59,  56,  56,  56,  56,  289, 59,  289, 59,
       289, 59,  271, 56,  56,  289, 56,  56,  56,  56,  289, 59,  56,  56,  59,  289, 59,  289, 272, 59,  56,  56,

       59,  289, 59,  273, 56,  56,  56,  56,  289, 56,  56,  59,  289, 275, 59,  289, 59,  289, 274, 277, 59,  289, 56,  56,  56,  56,
       56,  56,  59,  56,  56,  276, 278, 289, 59,  279, 59,  56,  56,  59,  56,  56,  56,  56,  289, 281, 289, 280, 56,  56,  56,  56,
       59,  289, 59,  289, 59,  289, 283, 59,  56,  56,  56,  56,  282, 56,  56,  59,  56,  56,  59,  289, 59,  285, 56,  56,  289, 284,
       59,  289, 59,  56,  56,  289, 286, 56,  56,  56,  56,  289, 59,  289, 59,  56,  56,  59,  289, 287, 59,  56,

       56,  289, 289, 289, 59,  289, 289, 289, 289, 288, 289, 59,  289, 289, 289, 59,  289, 59,  289, 289, 289, 289, 289, 59,  289, 289,
       289, 289, 289, 59,  37,  37,  37,  37,  37,  37,  37,  41,  41,  41,  41,  41,  41,  41,  45,  45,  45,  45,  45,  45,  45,  57,
       57,  57,  83,  83,  289, 83,  83,  83,  83,  88,  88,  289, 88,  88,  88,  88,  90,  90,  289, 289, 289, 90,  95,  95,  95,  95,
       95,  95,  95,  133, 133, 133, 289, 133, 133, 136, 136, 136, 9,   289, 289, 289, 289, 289, 289, 289, 289, 289,

       289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
       289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289};

static const flex_int16_t yy_chk[1445]
    = {0,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,
       1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,
       1,   1,   3,   3,   4,   4,   5,   3,   5,   4,   6,   18,  6,   7,   7,   7,   18,  7,   8,   8,   8,   16,  8,   16,  19,  52,
       19,  52,  20,  20,  52,  16,  21,  21,  19,  20,  22,  22,  23,  23,  298, 48,  48,  48,  23,  5,   22,  53,  23,

       6,   233, 51,  23,  51,  16,  53,  22,  19,  20,  25,  25,  51,  21,  26,  26,  48,  22,  24,  23,  24,  24,  24,  24,  203, 27,
       27,  28,  28,  53,  25,  29,  29,  26,  26,  51,  172, 28,  31,  31,  25,  29,  33,  33,  26,  27,  135, 28,  31,  28,  94,  24,
       31,  30,  30,  27,  33,  28,  35,  35,  93,  29,  30,  30,  32,  32,  36,  36,  31,  30,  55,  55,  33,  65,  32,  46,  46,  46,
       47,  47,  47,  57,  57,  30,  32,  56,  58,  58,  35,  95,  95,  35,  97,  97,  32,  50,  36,  92,  92,  92,

       60,  60,  36,  131, 131, 131, 40,  39,  131, 58,  17,  57,  61,  61,  13,  46,  58,  60,  47,  59,  59,  92,  59,  59,  59,  59,
       59,  59,  59,  59,  60,  61,  9,   59,  59,  59,  62,  62,  63,  63,  0,   0,   61,  66,  66,  66,  64,  64,  67,  67,  0,   68,
       68,  0,   0,   63,  69,  69,  0,   68,  62,  63,  71,  71,  63,  67,  62,  0,   63,  59,  59,  59,  64,  66,  68,  68,  64,  69,
       67,  70,  70,  68,  72,  72,  71,  0,   69,  70,  73,  73,  76,  76,  71,  74,  74,  75,  75,  77,  77,  0,

       0,   74,  81,  81,  72,  0,   75,  77,  73,  70,  0,   74,  72,  0,   76,  78,  78,  74,  73,  81,  76,  79,  79,  74,  0,   75,
       0,   77,  80,  80,  83,  83,  81,  78,  82,  82,  84,  84,  0,   79,  0,   85,  85,  82,  0,   78,  0,   80,  98,  98,  80,  79,
       89,  89,  89,  100, 100, 0,   80,  0,   83,  109, 109, 0,   82,  0,   84,  90,  90,  90,  84,  85,  90,  101, 101, 100, 103, 103,
       98,  85,  0,   104, 104, 109, 0,   100, 103, 104, 0,   0,   101, 109, 89,  0,   0,   102, 102, 0,   129, 129,

       108, 108, 0,   101, 102, 0,   103, 90,  91,  108, 91,  104, 91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  102,
       105, 105, 129, 0,   108, 129, 0,   106, 106, 0,   0,   0,   0,   0,   105, 0,   0,   0,   0,   0,   0,   106, 91,  0,   91,  0,
       0,   130, 130, 0,   105, 0,   91,  91,  91,  99,  99,  106, 99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,
       107, 107, 110, 110, 0,   130, 111, 111, 130, 112, 112, 113, 113, 0,   107, 112, 111, 114, 114, 115, 115, 119,

       119, 99,  113, 99,  110, 119, 117, 117, 107, 114, 110, 99,  99,  99,  111, 118, 118, 112, 0,   113, 0,   115, 116, 116, 0,   114,
       117, 115, 117, 119, 116, 120, 120, 0,   116, 118, 117, 121, 121, 122, 122, 0,   123, 123, 0,   118, 124, 124, 0,   125, 125, 0,
       116, 0,   126, 126, 124, 120, 125, 0,   124, 120, 121, 123, 127, 127, 122, 121, 0,   122, 136, 136, 123, 128, 128, 0,   124, 126,
       0,   125, 133, 133, 133, 0,   126, 133, 139, 139, 127, 138, 138, 0,   140, 140, 127, 0,   0,   128, 0,   0,

       136, 0,   140, 128, 141, 141, 138, 0,   145, 145, 139, 142, 142, 146, 146, 0,   139, 145, 0,   138, 133, 134, 140, 134, 0,   134,
       134, 0,   134, 134, 134, 134, 134, 134, 141, 134, 134, 134, 145, 142, 0,   142, 0,   146, 0,   0,   143, 143, 0,   0,   0,   0,
       0,   0,   0,   144, 144, 0,   143, 0,   0,   148, 148, 144, 151, 151, 0,   148, 0,   0,   151, 134, 134, 134, 137, 137, 143, 137,
       137, 137, 137, 137, 137, 137, 137, 144, 147, 147, 137, 137, 137, 148, 149, 149, 151, 0,   147, 150, 150, 152,

       152, 153, 153, 154, 154, 0,   155, 155, 156, 156, 157, 157, 0,   154, 149, 0,   147, 158, 158, 152, 157, 150, 149, 0,   137, 137,
       137, 150, 155, 152, 0,   153, 0,   154, 156, 0,   155, 0,   156, 0,   157, 159, 159, 158, 160, 160, 0,   158, 161, 161, 162, 162,
       163, 163, 160, 159, 164, 164, 165, 165, 168, 168, 163, 166, 166, 0,   168, 167, 167, 161, 0,   159, 169, 169, 160, 170, 170, 165,
       161, 164, 162, 167, 163, 166, 0,   169, 164, 0,   165, 0,   168, 171, 171, 166, 173, 173, 0,   167, 174, 174,

       175, 175, 169, 176, 176, 170, 0,   170, 177, 177, 178, 178, 179, 179, 176, 181, 181, 175, 0,   173, 178, 171, 179, 171, 173, 0,
       174, 177, 174, 0,   175, 180, 180, 176, 181, 182, 182, 0,   177, 0,   178, 0,   179, 182, 0,   181, 183, 183, 0,   180, 184, 184,
       0,   185, 185, 186, 186, 187, 187, 183, 0,   180, 185, 187, 0,   182, 0,   188, 188, 184, 189, 189, 0,   190, 190, 0,   183, 188,
       186, 190, 184, 193, 193, 185, 0,   186, 0,   187, 189, 191, 191, 192, 192, 0,   193, 194, 194, 188, 195, 195,

       189, 197, 197, 190, 196, 196, 195, 0,   191, 198, 198, 193, 0,   192, 199, 199, 196, 194, 0,   191, 0,   192, 0,   197, 0,   194,
       199, 0,   195, 198, 0,   197, 200, 200, 196, 201, 201, 202, 202, 198, 204, 204, 205, 205, 199, 206, 206, 207, 207, 208, 208, 209,
       209, 0,   210, 210, 211, 211, 213, 213, 0,   207, 200, 205, 204, 201, 211, 202, 206, 201, 204, 202, 205, 214, 214, 206, 210, 207,
       213, 208, 0,   209, 212, 212, 210, 0,   211, 0,   213, 0,   212, 0,   215, 215, 216, 216, 217, 217, 218, 218,

       0,   219, 219, 214, 215, 220, 220, 0,   221, 221, 222, 222, 212, 223, 223, 0,   218, 224, 224, 217, 0,   0,   215, 219, 216, 221,
       217, 0,   218, 228, 228, 219, 0,   225, 225, 220, 223, 224, 221, 225, 222, 227, 227, 223, 226, 226, 0,   224, 0,   227, 226, 229,
       229, 0,   230, 230, 231, 231, 0,   228, 232, 232, 0,   225, 230, 234, 234, 235, 235, 0,   229, 227, 236, 236, 226, 234, 0,   235,
       0,   237, 237, 229, 236, 0,   230, 0,   231, 238, 238, 231, 232, 239, 239, 232, 0,   234, 237, 235, 240, 240,

       241, 241, 236, 242, 242, 243, 243, 0,   240, 237, 239, 244, 244, 242, 245, 245, 0,   238, 0,   241, 0,   239, 246, 246, 247, 247,
       248, 248, 240, 0,   241, 249, 249, 242, 0,   243, 250, 250, 247, 252, 252, 244, 245, 248, 245, 251, 251, 253, 253, 254, 254, 0,
       246, 250, 247, 249, 248, 0,   251, 255, 255, 249, 257, 257, 258, 258, 250, 259, 259, 252, 260, 260, 261, 261, 0,   251, 0,   253,
       0,   254, 260, 262, 262, 0,   263, 263, 264, 264, 0,   255, 265, 265, 257, 0,   258, 0,   261, 259, 266, 266,

       260, 0,   261, 263, 267, 267, 268, 268, 0,   269, 269, 262, 0,   267, 263, 0,   264, 0,   266, 269, 265, 0,   270, 270, 271, 271,
       274, 274, 266, 272, 272, 268, 270, 0,   267, 272, 268, 273, 273, 269, 275, 275, 276, 276, 0,   274, 0,   273, 277, 277, 278, 278,
       270, 0,   271, 0,   274, 0,   278, 272, 279, 279, 281, 281, 276, 280, 280, 273, 284, 284, 275, 0,   276, 280, 282, 282, 0,   279,
       277, 0,   278, 283, 283, 0,   282, 285, 285, 286, 286, 0,   279, 0,   281, 287, 287, 280, 0,   283, 284, 288,

       288, 0,   0,   0,   282, 0,   0,   0,   0,   285, 0,   283, 0,   0,   0,   285, 0,   286, 0,   0,   0,   0,   0,   287, 0,   0,
       0,   0,   0,   288, 290, 290, 290, 290, 290, 290, 290, 291, 291, 291, 291, 291, 291, 291, 292, 292, 292, 292, 292, 292, 292, 293,
       293, 293, 294, 294, 0,   294, 294, 294, 294, 295, 295, 0,   295, 295, 295, 295, 296, 296, 0,   0,   0,   296, 297, 297, 297, 297,
       297, 297, 297, 299, 299, 299, 0,   299, 299, 300, 300, 300, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289,

       289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
       289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289};

static yy_state_type yy_last_accepting_state;
static char* yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char* yytext;
#line 1 "/Project/home/chenshijian/iEDA/src/iSTA/sdf-parser/SdfLex.l"
#line 2 "/Project/home/chenshijian/iEDA/src/iSTA/sdf-parser/SdfLex.l"

#include <string>

#include "SdfParse.hh"
#include "SdfReader.hh"
#include "log/Log.hh"
#include "string/Str.hh"

using namespace ista;

#define YY_NO_INPUT

static std::string sdf_token;

int g_sdf_line = 0;
extern SdfReader* g_sdf_reader;

void sdfFlushBuffer()
{
  YY_FLUSH_BUFFER;
}

#line 1159 "/Project/home/chenshijian/iEDA/src/iSTA/sdf-parser/SdfLex.cc"
/* %option debug */

#line 1162 "/Project/home/chenshijian/iEDA/src/iSTA/sdf-parser/SdfLex.cc"

#define INITIAL 0
#define COMMENT 1
#define QUOTE 2
#define COND_EXPR 3

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void*
#endif

static int yy_init_globals(void);

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy(void);

int yyget_debug(void);

void yyset_debug(int debug_flag);

YY_EXTRA_TYPE yyget_extra(void);

void yyset_extra(YY_EXTRA_TYPE user_defined);

FILE* yyget_in(void);

void yyset_in(FILE* _in_str);

FILE* yyget_out(void);

void yyset_out(FILE* _out_str);

int yyget_leng(void);

char* yyget_text(void);

int yyget_lineno(void);

void yyset_lineno(int _line_number);

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap(void);
#else
extern int yywrap(void);
#endif
#endif

#ifndef YY_NO_UNPUT

#endif

#ifndef yytext_ptr
static void yy_flex_strncpy(char*, const char*, int);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen(const char*);
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput(void);
#else
static int input(void);
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO                                         \
  do {                                               \
    if (fwrite(yytext, (size_t) yyleng, 1, yyout)) { \
    }                                                \
  } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf, result, max_size)                                                       \
  if (YY_CURRENT_BUFFER_LVALUE->yy_is_interactive) {                                          \
    int c = '*';                                                                              \
    int n;                                                                                    \
    for (n = 0; n < max_size && (c = getc(yyin)) != EOF && c != '\n'; ++n)                    \
      buf[n] = (char) c;                                                                      \
    if (c == '\n')                                                                            \
      buf[n++] = (char) c;                                                                    \
    if (c == EOF && ferror(yyin))                                                             \
      YY_FATAL_ERROR("input in flex scanner failed");                                         \
    result = n;                                                                               \
  } else {                                                                                    \
    errno = 0;                                                                                \
    while ((result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) { \
      if (errno != EINTR) {                                                                   \
        YY_FATAL_ERROR("input in flex scanner failed");                                       \
        break;                                                                                \
      }                                                                                       \
      errno = 0;                                                                              \
      clearerr(yyin);                                                                         \
    }                                                                                         \
  }

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error(msg)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex(void);

#define YY_DECL int yylex(void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/ break;
#endif

#define YY_RULE_SETUP YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
  yy_state_type yy_current_state;
  char *yy_cp, *yy_bp;
  int yy_act;

  if (!(yy_init)) {
    (yy_init) = 1;

#ifdef YY_USER_INIT
    YY_USER_INIT;
#endif

    if (!(yy_start))
      (yy_start) = 1; /* first start state */

    if (!yyin)
      yyin = stdin;

    if (!yyout)
      yyout = stdout;

    if (!YY_CURRENT_BUFFER) {
      yyensure_buffer_stack();
      YY_CURRENT_BUFFER_LVALUE = yy_create_buffer(yyin, YY_BUF_SIZE);
    }

    yy_load_buffer_state();
  }

  {
#line 57 "/Project/home/chenshijian/iEDA/src/iSTA/sdf-parser/SdfLex.l"

#line 1383 "/Project/home/chenshijian/iEDA/src/iSTA/sdf-parser/SdfLex.cc"

    while (/*CONSTCOND*/ 1) /* loops until end-of-file is reached */
    {
      yy_cp = (yy_c_buf_p);

      /* Support of yytext. */
      *yy_cp = (yy_hold_char);

      /* yy_bp points to the position in yy_ch_buf of the start of
       * the current run.
       */
      yy_bp = yy_cp;

      yy_current_state = (yy_start);
    yy_match:
      do {
        YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
        if (yy_accept[yy_current_state]) {
          (yy_last_accepting_state) = yy_current_state;
          (yy_last_accepting_cpos) = yy_cp;
        }
        while (yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state) {
          yy_current_state = (int) yy_def[yy_current_state];
          if (yy_current_state >= 290)
            yy_c = yy_meta[yy_c];
        }
        yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
        ++yy_cp;
      } while (yy_current_state != 289);
      yy_cp = (yy_last_accepting_cpos);
      yy_current_state = (yy_last_accepting_state);

    yy_find_action:
      yy_act = yy_accept[yy_current_state];

      YY_DO_BEFORE_ACTION;

    do_action: /* This label is used only to access EOF actions. */

      switch (yy_act) { /* beginning of action switch */
        case 0:         /* must back up */
          /* undo the effects of YY_DO_BEFORE_ACTION */
          *yy_cp = (yy_hold_char);
          yy_cp = (yy_last_accepting_cpos);
          yy_current_state = (yy_last_accepting_state);
          goto yy_find_action;

        case 1:
          YY_RULE_SETUP
#line 59 "/Project/home/chenshijian/iEDA/src/iSTA/sdf-parser/SdfLex.l"
          {
            BEGIN COMMENT;
          }
          YY_BREAK

        case 2:
          YY_RULE_SETUP
#line 62 "/Project/home/chenshijian/iEDA/src/iSTA/sdf-parser/SdfLex.l"
          {
            BEGIN INITIAL;
          }
          YY_BREAK
        case 3:
          YY_RULE_SETUP
#line 64 "/Project/home/chenshijian/iEDA/src/iSTA/sdf-parser/SdfLex.l"

          YY_BREAK
        case 4:
          /* rule 4 can match eol */
          YY_RULE_SETUP
#line 65 "/Project/home/chenshijian/iEDA/src/iSTA/sdf-parser/SdfLex.l"
          {
            g_sdf_line++;
          }
          YY_BREAK
        case YY_STATE_EOF(COMMENT):
#line 67 "/Project/home/chenshijian/iEDA/src/iSTA/sdf-parser/SdfLex.l"
        {
          BEGIN(INITIAL);
          yyterminate();
        }
          YY_BREAK

        case 5:
          YY_RULE_SETUP
#line 73 "/Project/home/chenshijian/iEDA/src/iSTA/sdf-parser/SdfLex.l"
          {
            BEGIN QUOTE;
            sdf_token.erase();
          }
          YY_BREAK

        case 6:
          YY_RULE_SETUP
#line 76 "/Project/home/chenshijian/iEDA/src/iSTA/sdf-parser/SdfLex.l"
          {
            sdf_token += yytext[1];
          }
          YY_BREAK
        case 7:
          YY_RULE_SETUP
#line 78 "/Project/home/chenshijian/iEDA/src/iSTA/sdf-parser/SdfLex.l"
          {
            BEGIN INITIAL;
            Sdf_lval.string = Str::copy(sdf_token.c_str());
            return QSTRING;
          }
          YY_BREAK
        case 8:
          YY_RULE_SETUP
#line 84 "/Project/home/chenshijian/iEDA/src/iSTA/sdf-parser/SdfLex.l"
          {
            sdf_token += yytext[0];
          }
          YY_BREAK
        case YY_STATE_EOF(QUOTE):
#line 86 "/Project/home/chenshijian/iEDA/src/iSTA/sdf-parser/SdfLex.l"
        {
          LOG_FATAL << "unterminated quoted string";
          BEGIN(INITIAL);
          yyterminate();
        }
          YY_BREAK

        case 9:
          /* rule 9 can match eol */
          YY_RULE_SETUP
#line 93 "/Project/home/chenshijian/iEDA/src/iSTA/sdf-parser/SdfLex.l"
          {
            g_sdf_line++;
          }
          YY_BREAK
        case 10:
          YY_RULE_SETUP
#line 95 "/Project/home/chenshijian/iEDA/src/iSTA/sdf-parser/SdfLex.l"
          {
            Sdf_lval.number = static_cast<float>(atof(yytext));
            return NUMBER;
          }
          YY_BREAK
        case 11:
          YY_RULE_SETUP
#line 100 "/Project/home/chenshijian/iEDA/src/iSTA/sdf-parser/SdfLex.l"
          {
            return ((int) yytext[0]);
          }
          YY_BREAK
        case 12:
          YY_RULE_SETUP
#line 104 "/Project/home/chenshijian/iEDA/src/iSTA/sdf-parser/SdfLex.l"
          {
            return ABSOLUTE;
          }
          YY_BREAK
        case 13:
          YY_RULE_SETUP
#line 105 "/Project/home/chenshijian/iEDA/src/iSTA/sdf-parser/SdfLex.l"
          {
            return CELL;
          }
          YY_BREAK
        case 14:
          YY_RULE_SETUP
#line 106 "/Project/home/chenshijian/iEDA/src/iSTA/sdf-parser/SdfLex.l"
          {
            return CELLTYPE;
          }
          YY_BREAK
        case 15:
          YY_RULE_SETUP
#line 107 "/Project/home/chenshijian/iEDA/src/iSTA/sdf-parser/SdfLex.l"
          {
            return DATE;
          }
          YY_BREAK
        case 16:
          YY_RULE_SETUP
#line 108 "/Project/home/chenshijian/iEDA/src/iSTA/sdf-parser/SdfLex.l"
          {
            return DELAY;
          }
          YY_BREAK
        case 17:
          YY_RULE_SETUP
#line 109 "/Project/home/chenshijian/iEDA/src/iSTA/sdf-parser/SdfLex.l"
          {
            return DELAYFILE;
          }
          YY_BREAK
        case 18:
          YY_RULE_SETUP
#line 110 "/Project/home/chenshijian/iEDA/src/iSTA/sdf-parser/SdfLex.l"
          {
            return DESIGN;
          }
          YY_BREAK
        case 19:
          YY_RULE_SETUP
#line 111 "/Project/home/chenshijian/iEDA/src/iSTA/sdf-parser/SdfLex.l"
          {
            return DEVICE;
          }
          YY_BREAK
        case 20:
          YY_RULE_SETUP
#line 112 "/Project/home/chenshijian/iEDA/src/iSTA/sdf-parser/SdfLex.l"
          {
            return DIVIDER;
          }
          YY_BREAK
        case 21:
          YY_RULE_SETUP
#line 113 "/Project/home/chenshijian/iEDA/src/iSTA/sdf-parser/SdfLex.l"
          {
            return HOLD;
          }
          YY_BREAK
        case 22:
          YY_RULE_SETUP
#line 114 "/Project/home/chenshijian/iEDA/src/iSTA/sdf-parser/SdfLex.l"
          {
            return INCREMENTAL;
          }
          YY_BREAK
        case 23:
          YY_RULE_SETUP
#line 115 "/Project/home/chenshijian/iEDA/src/iSTA/sdf-parser/SdfLex.l"
          {
            return INSTANCE;
          }
          YY_BREAK
        case 24:
          YY_RULE_SETUP
#line 116 "/Project/home/chenshijian/iEDA/src/iSTA/sdf-parser/SdfLex.l"
          {
            return INTERCONNECT;
          }
          YY_BREAK
        case 25:
          YY_RULE_SETUP
#line 117 "/Project/home/chenshijian/iEDA/src/iSTA/sdf-parser/SdfLex.l"
          {
            return IOPATH;
          }
          YY_BREAK
        case 26:
          YY_RULE_SETUP
#line 118 "/Project/home/chenshijian/iEDA/src/iSTA/sdf-parser/SdfLex.l"
          {
            return NOCHANGE;
          }
          YY_BREAK
        case 27:
          YY_RULE_SETUP
#line 119 "/Project/home/chenshijian/iEDA/src/iSTA/sdf-parser/SdfLex.l"
          {
            return PERIOD;
          }
          YY_BREAK
        case 28:
          YY_RULE_SETUP
#line 120 "/Project/home/chenshijian/iEDA/src/iSTA/sdf-parser/SdfLex.l"
          {
            return PORT;
          }
          YY_BREAK
        case 29:
          YY_RULE_SETUP
#line 121 "/Project/home/chenshijian/iEDA/src/iSTA/sdf-parser/SdfLex.l"
          {
            return PROCESS;
          }
          YY_BREAK
        case 30:
          YY_RULE_SETUP
#line 122 "/Project/home/chenshijian/iEDA/src/iSTA/sdf-parser/SdfLex.l"
          {
            return PROGRAM;
          }
          YY_BREAK
        case 31:
          YY_RULE_SETUP
#line 123 "/Project/home/chenshijian/iEDA/src/iSTA/sdf-parser/SdfLex.l"
          {
            return RECOVERY;
          }
          YY_BREAK
        case 32:
          YY_RULE_SETUP
#line 124 "/Project/home/chenshijian/iEDA/src/iSTA/sdf-parser/SdfLex.l"
          {
            return RECREM;
          }
          YY_BREAK
        case 33:
          YY_RULE_SETUP
#line 125 "/Project/home/chenshijian/iEDA/src/iSTA/sdf-parser/SdfLex.l"
          {
            return REMOVAL;
          }
          YY_BREAK
        case 34:
          YY_RULE_SETUP
#line 126 "/Project/home/chenshijian/iEDA/src/iSTA/sdf-parser/SdfLex.l"
          {
            return RETAIN;
          }
          YY_BREAK
        case 35:
          YY_RULE_SETUP
#line 127 "/Project/home/chenshijian/iEDA/src/iSTA/sdf-parser/SdfLex.l"
          {
            return SDFVERSION;
          }
          YY_BREAK
        case 36:
          YY_RULE_SETUP
#line 128 "/Project/home/chenshijian/iEDA/src/iSTA/sdf-parser/SdfLex.l"
          {
            return SETUP;
          }
          YY_BREAK
        case 37:
          YY_RULE_SETUP
#line 129 "/Project/home/chenshijian/iEDA/src/iSTA/sdf-parser/SdfLex.l"
          {
            return SETUPHOLD;
          }
          YY_BREAK
        case 38:
          YY_RULE_SETUP
#line 130 "/Project/home/chenshijian/iEDA/src/iSTA/sdf-parser/SdfLex.l"
          {
            return SKEW;
          }
          YY_BREAK
        case 39:
          YY_RULE_SETUP
#line 131 "/Project/home/chenshijian/iEDA/src/iSTA/sdf-parser/SdfLex.l"
          {
            return TEMPERATURE;
          }
          YY_BREAK
        case 40:
          YY_RULE_SETUP
#line 132 "/Project/home/chenshijian/iEDA/src/iSTA/sdf-parser/SdfLex.l"
          {
            return TIMESCALE;
          }
          YY_BREAK
        case 41:
          YY_RULE_SETUP
#line 133 "/Project/home/chenshijian/iEDA/src/iSTA/sdf-parser/SdfLex.l"
          {
            return TIMINGCHECK;
          }
          YY_BREAK
        case 42:
          YY_RULE_SETUP
#line 134 "/Project/home/chenshijian/iEDA/src/iSTA/sdf-parser/SdfLex.l"
          {
            return VENDOR;
          }
          YY_BREAK
        case 43:
          YY_RULE_SETUP
#line 135 "/Project/home/chenshijian/iEDA/src/iSTA/sdf-parser/SdfLex.l"
          {
            return PVERSION;
          }
          YY_BREAK
        case 44:
          YY_RULE_SETUP
#line 136 "/Project/home/chenshijian/iEDA/src/iSTA/sdf-parser/SdfLex.l"
          {
            return VOLTAGE;
          }
          YY_BREAK
        case 45:
          YY_RULE_SETUP
#line 137 "/Project/home/chenshijian/iEDA/src/iSTA/sdf-parser/SdfLex.l"
          {
            return WIDTH;
          }
          YY_BREAK
        case 46:
          YY_RULE_SETUP
#line 138 "/Project/home/chenshijian/iEDA/src/iSTA/sdf-parser/SdfLex.l"
          {
            return NEGEDGE;
          }
          YY_BREAK
        case 47:
          YY_RULE_SETUP
#line 139 "/Project/home/chenshijian/iEDA/src/iSTA/sdf-parser/SdfLex.l"
          {
            return POSEDGE;
          }
          YY_BREAK
        case 48:
          YY_RULE_SETUP
#line 141 "/Project/home/chenshijian/iEDA/src/iSTA/sdf-parser/SdfLex.l"
          {
            return CONDELSE;
          }
          YY_BREAK
        case 49:
          YY_RULE_SETUP
#line 143 "/Project/home/chenshijian/iEDA/src/iSTA/sdf-parser/SdfLex.l"
          {
            BEGIN COND_EXPR;
            sdf_token.erase();
            return COND;
          }
          YY_BREAK
        case 50:
          /* rule 50 can match eol */
          YY_RULE_SETUP
#line 149 "/Project/home/chenshijian/iEDA/src/iSTA/sdf-parser/SdfLex.l"
          {
            BEGIN INITIAL;
            Sdf_lval.string = Str::copy(sdf_token.c_str());
            return EXPR_OPEN_IOPATH;
          }
          YY_BREAK
        case 51:
          YY_RULE_SETUP
#line 155 "/Project/home/chenshijian/iEDA/src/iSTA/sdf-parser/SdfLex.l"
          {
            /* Timing check conditions don't allow parens,
             * so use the paren as a marker for the end of the expr.
             */
            if (g_sdf_reader->isParseTimingCheck()) {
              BEGIN INITIAL;
              Sdf_lval.string = Str::copy(sdf_token.c_str());
              g_sdf_reader->set_parse_timing_check(false);
              return EXPR_OPEN;
            } else {
              sdf_token += yytext[0];
            }
          }
          YY_BREAK
        case 52:
          /* rule 52 can match eol */
          YY_RULE_SETUP
#line 171 "/Project/home/chenshijian/iEDA/src/iSTA/sdf-parser/SdfLex.l"
          {
            /* (COND expr port) */
            if (g_sdf_reader->isParseTimingCheck()) {
              BEGIN INITIAL;

              /* remove trailing ")" */
              yytext[strlen(yytext) - 1] = '\0';
              sdf_token += yytext;

              Sdf_lval.string = Str::copy(sdf_token.c_str());

              g_sdf_reader->set_parse_timing_check(false);

              /* No way to pass expr and id separately, so pass them together.
               */
              return EXPR_ID_CLOSE;
            } else {
              sdf_token += yytext;
            }
          }
          YY_BREAK
        case 53:
          /* rule 53 can match eol */
          YY_RULE_SETUP
#line 193 "/Project/home/chenshijian/iEDA/src/iSTA/sdf-parser/SdfLex.l"
          {
          }
          YY_BREAK
        case 54:
          YY_RULE_SETUP
#line 195 "/Project/home/chenshijian/iEDA/src/iSTA/sdf-parser/SdfLex.l"
          {
            sdf_token += yytext[0];
          }
          YY_BREAK
        case 55:
          YY_RULE_SETUP
#line 197 "/Project/home/chenshijian/iEDA/src/iSTA/sdf-parser/SdfLex.l"
          {
            Sdf_lval.string = Str::copy(yytext);
            return ID;
          }
          YY_BREAK
        case 56:
          YY_RULE_SETUP
#line 202 "/Project/home/chenshijian/iEDA/src/iSTA/sdf-parser/SdfLex.l"
          {
            Sdf_lval.string = Str::copy(yytext);
            return PATH;
          }
          YY_BREAK
        case 57:
          /* rule 57 can match eol */
          YY_RULE_SETUP
#line 207 "/Project/home/chenshijian/iEDA/src/iSTA/sdf-parser/SdfLex.l"
          {
            g_sdf_line++;
          }
          YY_BREAK
        case 58:
          /* rule 58 can match eol */
          YY_RULE_SETUP
#line 209 "/Project/home/chenshijian/iEDA/src/iSTA/sdf-parser/SdfLex.l"
          { /* Ignore blanks. */
          }
          YY_BREAK
        /* Send out of bound characters to parser. */
        case 59:
          YY_RULE_SETUP
#line 212 "/Project/home/chenshijian/iEDA/src/iSTA/sdf-parser/SdfLex.l"
          {
            return ((int) yytext[0]);
          }
          YY_BREAK
        case 60:
          YY_RULE_SETUP
#line 214 "/Project/home/chenshijian/iEDA/src/iSTA/sdf-parser/SdfLex.l"
          ECHO;
          YY_BREAK
#line 1820 "/Project/home/chenshijian/iEDA/src/iSTA/sdf-parser/SdfLex.cc"
        case YY_STATE_EOF(INITIAL):
        case YY_STATE_EOF(COND_EXPR):
          yyterminate();

        case YY_END_OF_BUFFER: {
          /* Amount of text matched not including the EOB char. */
          int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

          /* Undo the effects of YY_DO_BEFORE_ACTION. */
          *yy_cp = (yy_hold_char);
          YY_RESTORE_YY_MORE_OFFSET

          if (YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW) {
            /* We're scanning a new file or input source.  It's
             * possible that this happened because the user
             * just pointed yyin at a new source and called
             * yylex().  If so, then we have to assure
             * consistency between YY_CURRENT_BUFFER and our
             * globals.  Here is the right place to do so, because
             * this is the first action (other than possibly a
             * back-up) that will match for the new input source.
             */
            (yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
            YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
            YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
          }

          /* Note that here we test for yy_c_buf_p "<=" to the position
           * of the first EOB in the buffer, since yy_c_buf_p will
           * already have been incremented past the NUL character
           * (since all states make transitions on EOB to the
           * end-of-buffer state).  Contrast this with the test
           * in input().
           */
          if ((yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)]) { /* This was really a NUL. */
            yy_state_type yy_next_state;

            (yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

            yy_current_state = yy_get_previous_state();

            /* Okay, we're now positioned to make the NUL
             * transition.  We couldn't have
             * yy_get_previous_state() go ahead and do it
             * for us because it doesn't know how to deal
             * with the possibility of jamming (and we don't
             * want to build jamming into it because then it
             * will run more slowly).
             */

            yy_next_state = yy_try_NUL_trans(yy_current_state);

            yy_bp = (yytext_ptr) + YY_MORE_ADJ;

            if (yy_next_state) {
              /* Consume the NUL. */
              yy_cp = ++(yy_c_buf_p);
              yy_current_state = yy_next_state;
              goto yy_match;
            }

            else {
              yy_cp = (yy_last_accepting_cpos);
              yy_current_state = (yy_last_accepting_state);
              goto yy_find_action;
            }
          }

          else
            switch (yy_get_next_buffer()) {
              case EOB_ACT_END_OF_FILE: {
                (yy_did_buffer_switch_on_eof) = 0;

                if (yywrap()) {
                  /* Note: because we've taken care in
                   * yy_get_next_buffer() to have set up
                   * yytext, we can now set up
                   * yy_c_buf_p so that if some total
                   * hoser (like flex itself) wants to
                   * call the scanner after we return the
                   * YY_NULL, it'll still work - another
                   * YY_NULL will get returned.
                   */
                  (yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

                  yy_act = YY_STATE_EOF(YY_START);
                  goto do_action;
                }

                else {
                  if (!(yy_did_buffer_switch_on_eof))
                    YY_NEW_FILE;
                }
                break;
              }

              case EOB_ACT_CONTINUE_SCAN:
                (yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

                yy_current_state = yy_get_previous_state();

                yy_cp = (yy_c_buf_p);
                yy_bp = (yytext_ptr) + YY_MORE_ADJ;
                goto yy_match;

              case EOB_ACT_LAST_MATCH:
                (yy_c_buf_p) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

                yy_current_state = yy_get_previous_state();

                yy_cp = (yy_c_buf_p);
                yy_bp = (yytext_ptr) + YY_MORE_ADJ;
                goto yy_find_action;
            }
          break;
        }

        default:
          YY_FATAL_ERROR("fatal flex scanner internal error--no action found");
      } /* end of action switch */
    }   /* end of scanning one token */
  }     /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer(void)
{
  char* dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
  char* source = (yytext_ptr);
  int number_to_move, i;
  int ret_val;

  if ((yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1])
    YY_FATAL_ERROR("fatal flex scanner internal error--end of buffer missed");

  if (YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0) { /* Don't try to fill the buffer, so this is an EOF. */
    if ((yy_c_buf_p) - (yytext_ptr) -YY_MORE_ADJ == 1) {
      /* We matched a single character, the EOB, so
       * treat this as a final EOF.
       */
      return EOB_ACT_END_OF_FILE;
    }

    else {
      /* We matched some text prior to the EOB, first
       * process it.
       */
      return EOB_ACT_LAST_MATCH;
    }
  }

  /* Try to read more data. */

  /* First move last chars to start of buffer. */
  number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr) -1);

  for (i = 0; i < number_to_move; ++i)
    *(dest++) = *(source++);

  if (YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING)
    /* don't do the read, it's not guaranteed to return an EOF,
     * just force an EOF
     */
    YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

  else {
    int num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

    while (num_to_read <= 0) { /* Not enough room in the buffer - grow it. */

      /* just a shorter name for the current buffer */
      YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

      int yy_c_buf_p_offset = (int) ((yy_c_buf_p) -b->yy_ch_buf);

      if (b->yy_is_our_buffer) {
        int new_size = b->yy_buf_size * 2;

        if (new_size <= 0)
          b->yy_buf_size += b->yy_buf_size / 8;
        else
          b->yy_buf_size *= 2;

        b->yy_ch_buf = (char*)
            /* Include room in for 2 EOB chars. */
            yyrealloc((void*) b->yy_ch_buf, (yy_size_t) (b->yy_buf_size + 2));
      } else
        /* Can't grow it, we don't own it. */
        b->yy_ch_buf = NULL;

      if (!b->yy_ch_buf)
        YY_FATAL_ERROR("fatal error - scanner input buffer overflow");

      (yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

      num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;
    }

    if (num_to_read > YY_READ_BUF_SIZE)
      num_to_read = YY_READ_BUF_SIZE;

    /* Read in more data. */
    YY_INPUT((&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]), (yy_n_chars), num_to_read);

    YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
  }

  if ((yy_n_chars) == 0) {
    if (number_to_move == YY_MORE_ADJ) {
      ret_val = EOB_ACT_END_OF_FILE;
      yyrestart(yyin);
    }

    else {
      ret_val = EOB_ACT_LAST_MATCH;
      YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_EOF_PENDING;
    }
  }

  else
    ret_val = EOB_ACT_CONTINUE_SCAN;

  if (((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
    /* Extend the array by 50%, plus the number we really need. */
    int new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
    YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char*) yyrealloc((void*) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size);
    if (!YY_CURRENT_BUFFER_LVALUE->yy_ch_buf)
      YY_FATAL_ERROR("out of dynamic memory in yy_get_next_buffer()");
    /* "- 2" to take care of EOB's */
    YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
  }

  (yy_n_chars) += number_to_move;
  YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
  YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

  (yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

  return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

static yy_state_type yy_get_previous_state(void)
{
  yy_state_type yy_current_state;
  char* yy_cp;

  yy_current_state = (yy_start);

  for (yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp) {
    YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
    if (yy_accept[yy_current_state]) {
      (yy_last_accepting_state) = yy_current_state;
      (yy_last_accepting_cpos) = yy_cp;
    }
    while (yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state) {
      yy_current_state = (int) yy_def[yy_current_state];
      if (yy_current_state >= 290)
        yy_c = yy_meta[yy_c];
    }
    yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
  }

  return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
static yy_state_type yy_try_NUL_trans(yy_state_type yy_current_state)
{
  int yy_is_jam;
  char* yy_cp = (yy_c_buf_p);

  YY_CHAR yy_c = 1;
  if (yy_accept[yy_current_state]) {
    (yy_last_accepting_state) = yy_current_state;
    (yy_last_accepting_cpos) = yy_cp;
  }
  while (yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state) {
    yy_current_state = (int) yy_def[yy_current_state];
    if (yy_current_state >= 290)
      yy_c = yy_meta[yy_c];
  }
  yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
  yy_is_jam = (yy_current_state == 289);

  return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput(void)
#else
static int input(void)
#endif

{
  int c;

  *(yy_c_buf_p) = (yy_hold_char);

  if (*(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR) {
    /* yy_c_buf_p now points to the character we want to return.
     * If this occurs *before* the EOB characters, then it's a
     * valid NUL; if not, then we've hit the end of the buffer.
     */
    if ((yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)])
      /* This was really a NUL. */
      *(yy_c_buf_p) = '\0';

    else { /* need more input */
      int offset = (int) ((yy_c_buf_p) - (yytext_ptr));
      ++(yy_c_buf_p);

      switch (yy_get_next_buffer()) {
        case EOB_ACT_LAST_MATCH:
          /* This happens because yy_g_n_b()
           * sees that we've accumulated a
           * token and flags that we need to
           * try matching the token before
           * proceeding.  But for input(),
           * there's no matching to consider.
           * So convert the EOB_ACT_LAST_MATCH
           * to EOB_ACT_END_OF_FILE.
           */

          /* Reset buffer status. */
          yyrestart(yyin);

          /*FALLTHROUGH*/

        case EOB_ACT_END_OF_FILE: {
          if (yywrap())
            return 0;

          if (!(yy_did_buffer_switch_on_eof))
            YY_NEW_FILE;
#ifdef __cplusplus
          return yyinput();
#else
          return input();
#endif
        }

        case EOB_ACT_CONTINUE_SCAN:
          (yy_c_buf_p) = (yytext_ptr) + offset;
          break;
      }
    }
  }

  c = *(unsigned char*) (yy_c_buf_p); /* cast for 8-bit char's */
  *(yy_c_buf_p) = '\0';               /* preserve yytext */
  (yy_hold_char) = *++(yy_c_buf_p);

  return c;
}
#endif /* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 *
 * @note This function does not reset the start condition to @c INITIAL .
 */
void yyrestart(FILE* input_file)
{
  if (!YY_CURRENT_BUFFER) {
    yyensure_buffer_stack();
    YY_CURRENT_BUFFER_LVALUE = yy_create_buffer(yyin, YY_BUF_SIZE);
  }

  yy_init_buffer(YY_CURRENT_BUFFER, input_file);
  yy_load_buffer_state();
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 *
 */
void yy_switch_to_buffer(YY_BUFFER_STATE new_buffer)
{
  /* TODO. We should be able to replace this entire function body
   * with
   *		yypop_buffer_state();
   *		yypush_buffer_state(new_buffer);
   */
  yyensure_buffer_stack();
  if (YY_CURRENT_BUFFER == new_buffer)
    return;

  if (YY_CURRENT_BUFFER) {
    /* Flush out information for old buffer. */
    *(yy_c_buf_p) = (yy_hold_char);
    YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
    YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
  }

  YY_CURRENT_BUFFER_LVALUE = new_buffer;
  yy_load_buffer_state();

  /* We don't actually know whether we did this switch during
   * EOF (yywrap()) processing, but the only time this flag
   * is looked at is after yywrap() is called, so it's safe
   * to go ahead and always set it.
   */
  (yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state(void)
{
  (yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
  (yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
  yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
  (yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c
 * YY_BUF_SIZE.
 *
 * @return the allocated buffer state.
 */
YY_BUFFER_STATE yy_create_buffer(FILE* file, int size)
{
  YY_BUFFER_STATE b;

  b = (YY_BUFFER_STATE) yyalloc(sizeof(struct yy_buffer_state));
  if (!b)
    YY_FATAL_ERROR("out of dynamic memory in yy_create_buffer()");

  b->yy_buf_size = size;

  /* yy_ch_buf has to be 2 characters longer than the size given because
   * we need to put in 2 end-of-buffer characters.
   */
  b->yy_ch_buf = (char*) yyalloc((yy_size_t) (b->yy_buf_size + 2));
  if (!b->yy_ch_buf)
    YY_FATAL_ERROR("out of dynamic memory in yy_create_buffer()");

  b->yy_is_our_buffer = 1;

  yy_init_buffer(b, file);

  return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 *
 */
void yy_delete_buffer(YY_BUFFER_STATE b)
{
  if (!b)
    return;

  if (b == YY_CURRENT_BUFFER) /* Not sure if we should pop here. */
    YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

  if (b->yy_is_our_buffer)
    yyfree((void*) b->yy_ch_buf);

  yyfree((void*) b);
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
static void yy_init_buffer(YY_BUFFER_STATE b, FILE* file)

{
  int oerrno = errno;

  yy_flush_buffer(b);

  b->yy_input_file = file;
  b->yy_fill_buffer = 1;

  /* If b is the current buffer, then yy_init_buffer was _probably_
   * called from yyrestart() or through yy_get_next_buffer.
   * In that case, we don't want to reset the lineno or column.
   */
  if (b != YY_CURRENT_BUFFER) {
    b->yy_bs_lineno = 1;
    b->yy_bs_column = 0;
  }

  b->yy_is_interactive = 0;

  errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 *
 */
void yy_flush_buffer(YY_BUFFER_STATE b)
{
  if (!b)
    return;

  b->yy_n_chars = 0;

  /* We always need two end-of-buffer characters.  The first causes
   * a transition to the end-of-buffer state.  The second causes
   * a jam in that state.
   */
  b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
  b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

  b->yy_buf_pos = &b->yy_ch_buf[0];

  b->yy_at_bol = 1;
  b->yy_buffer_status = YY_BUFFER_NEW;

  if (b == YY_CURRENT_BUFFER)
    yy_load_buffer_state();
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *
 */
void yypush_buffer_state(YY_BUFFER_STATE new_buffer)
{
  if (new_buffer == NULL)
    return;

  yyensure_buffer_stack();

  /* This block is copied from yy_switch_to_buffer. */
  if (YY_CURRENT_BUFFER) {
    /* Flush out information for old buffer. */
    *(yy_c_buf_p) = (yy_hold_char);
    YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
    YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
  }

  /* Only push if top exists. Otherwise, replace top. */
  if (YY_CURRENT_BUFFER)
    (yy_buffer_stack_top)++;
  YY_CURRENT_BUFFER_LVALUE = new_buffer;

  /* copied from yy_switch_to_buffer. */
  yy_load_buffer_state();
  (yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *
 */
void yypop_buffer_state(void)
{
  if (!YY_CURRENT_BUFFER)
    return;

  yy_delete_buffer(YY_CURRENT_BUFFER);
  YY_CURRENT_BUFFER_LVALUE = NULL;
  if ((yy_buffer_stack_top) > 0)
    --(yy_buffer_stack_top);

  if (YY_CURRENT_BUFFER) {
    yy_load_buffer_state();
    (yy_did_buffer_switch_on_eof) = 1;
  }
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack(void)
{
  yy_size_t num_to_alloc;

  if (!(yy_buffer_stack)) {
    /* First allocation is just for 2 elements, since we don't know if this
     * scanner will even need a stack. We use 2 instead of 1 to avoid an
     * immediate realloc on the next call.
     */
    num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
    (yy_buffer_stack) = (struct yy_buffer_state**) yyalloc(num_to_alloc * sizeof(struct yy_buffer_state*));
    if (!(yy_buffer_stack))
      YY_FATAL_ERROR("out of dynamic memory in yyensure_buffer_stack()");

    memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));

    (yy_buffer_stack_max) = num_to_alloc;
    (yy_buffer_stack_top) = 0;
    return;
  }

  if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1) {
    /* Increase the buffer to prepare for a possible push. */
    yy_size_t grow_size = 8 /* arbitrary grow size */;

    num_to_alloc = (yy_buffer_stack_max) + grow_size;
    (yy_buffer_stack) = (struct yy_buffer_state**) yyrealloc((yy_buffer_stack), num_to_alloc * sizeof(struct yy_buffer_state*));
    if (!(yy_buffer_stack))
      YY_FATAL_ERROR("out of dynamic memory in yyensure_buffer_stack()");

    /* zero only the new slots.*/
    memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
    (yy_buffer_stack_max) = num_to_alloc;
  }
}

/** Setup the input buffer state to scan directly from a user-specified
 * character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 *
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer(char* base, yy_size_t size)
{
  YY_BUFFER_STATE b;

  if (size < 2 || base[size - 2] != YY_END_OF_BUFFER_CHAR || base[size - 1] != YY_END_OF_BUFFER_CHAR)
    /* They forgot to leave room for the EOB's. */
    return NULL;

  b = (YY_BUFFER_STATE) yyalloc(sizeof(struct yy_buffer_state));
  if (!b)
    YY_FATAL_ERROR("out of dynamic memory in yy_scan_buffer()");

  b->yy_buf_size = (int) (size - 2); /* "- 2" to take care of EOB's */
  b->yy_buf_pos = b->yy_ch_buf = base;
  b->yy_is_our_buffer = 0;
  b->yy_input_file = NULL;
  b->yy_n_chars = b->yy_buf_size;
  b->yy_is_interactive = 0;
  b->yy_at_bol = 1;
  b->yy_fill_buffer = 0;
  b->yy_buffer_status = YY_BUFFER_NEW;

  yy_switch_to_buffer(b);

  return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 *
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string(const char* yystr)
{
  return yy_scan_bytes(yystr, (int) strlen(yystr));
}

/** Setup the input buffer state to scan the given bytes. The next call to
 * yylex() will scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 *
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes(const char* yybytes, int _yybytes_len)
{
  YY_BUFFER_STATE b;
  char* buf;
  yy_size_t n;
  int i;

  /* Get memory for full buffer, including space for trailing EOB's. */
  n = (yy_size_t) (_yybytes_len + 2);
  buf = (char*) yyalloc(n);
  if (!buf)
    YY_FATAL_ERROR("out of dynamic memory in yy_scan_bytes()");

  for (i = 0; i < _yybytes_len; ++i)
    buf[i] = yybytes[i];

  buf[_yybytes_len] = buf[_yybytes_len + 1] = YY_END_OF_BUFFER_CHAR;

  b = yy_scan_buffer(buf, n);
  if (!b)
    YY_FATAL_ERROR("bad buffer in yy_scan_bytes()");

  /* It's okay to grow etc. this buffer, and we should throw it
   * away when we're done.
   */
  b->yy_is_our_buffer = 1;

  return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error(const char* msg)
{
  fprintf(stderr, "%s\n", msg);
  exit(YY_EXIT_FAILURE);
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n)                             \
  do {                                        \
    /* Undo effects of setting up yytext. */  \
    int yyless_macro_arg = (n);               \
    YY_LESS_LINENO(yyless_macro_arg);         \
    yytext[yyleng] = (yy_hold_char);          \
    (yy_c_buf_p) = yytext + yyless_macro_arg; \
    (yy_hold_char) = *(yy_c_buf_p);           \
    *(yy_c_buf_p) = '\0';                     \
    yyleng = yyless_macro_arg;                \
  } while (0)

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 *
 */
int yyget_lineno(void)
{
  return yylineno;
}

/** Get the input stream.
 *
 */
FILE* yyget_in(void)
{
  return yyin;
}

/** Get the output stream.
 *
 */
FILE* yyget_out(void)
{
  return yyout;
}

/** Get the length of the current token.
 *
 */
int yyget_leng(void)
{
  return yyleng;
}

/** Get the current token.
 *
 */

char* yyget_text(void)
{
  return yytext;
}

/** Set the current line number.
 * @param _line_number line number
 *
 */
void yyset_lineno(int _line_number)
{
  yylineno = _line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 *
 * @see yy_switch_to_buffer
 */
void yyset_in(FILE* _in_str)
{
  yyin = _in_str;
}

void yyset_out(FILE* _out_str)
{
  yyout = _out_str;
}

int yyget_debug(void)
{
  return yy_flex_debug;
}

void yyset_debug(int _bdebug)
{
  yy_flex_debug = _bdebug;
}

static int yy_init_globals(void)
{
  /* Initialization is the same as for the non-reentrant scanner.
   * This function is called from yylex_destroy(), so don't allocate here.
   */

  (yy_buffer_stack) = NULL;
  (yy_buffer_stack_top) = 0;
  (yy_buffer_stack_max) = 0;
  (yy_c_buf_p) = NULL;
  (yy_init) = 0;
  (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
  yyin = stdin;
  yyout = stdout;
#else
  yyin = NULL;
  yyout = NULL;
#endif

  /* For future reference: Set errno on error, since we are called by
   * yylex_init()
   */
  return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy(void)
{
  /* Pop the buffer stack, destroying each element. */
  while (YY_CURRENT_BUFFER) {
    yy_delete_buffer(YY_CURRENT_BUFFER);
    YY_CURRENT_BUFFER_LVALUE = NULL;
    yypop_buffer_state();
  }

  /* Destroy the stack itself. */
  yyfree((yy_buffer_stack));
  (yy_buffer_stack) = NULL;

  /* Reset the globals. This is important in a non-reentrant scanner so the next
   * time yylex() is called, initialization will occur. */
  yy_init_globals();

  return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy(char* s1, const char* s2, int n)
{
  int i;
  for (i = 0; i < n; ++i)
    s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen(const char* s)
{
  int n;
  for (n = 0; s[n]; ++n)
    ;

  return n;
}
#endif

void* yyalloc(yy_size_t size)
{
  return malloc(size);
}

void* yyrealloc(void* ptr, yy_size_t size)
{
  /* The cast to (char *) in the following accommodates both
   * implementations that use char* generic pointers, and those
   * that use void* generic pointers.  It works with the latter
   * because both ANSI C and C++ allow castless assignment from
   * any pointer type to void*, and deal with argument conversions
   * as though doing an assignment.
   */
  return realloc(ptr, size);
}

void yyfree(void* ptr)
{
  free((char*) ptr); /* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 214 "/Project/home/chenshijian/iEDA/src/iSTA/sdf-parser/SdfLex.l"
