// ***************************************************************************************
// Copyright (c) 2023-2025 Peng Cheng Laboratory
// Copyright (c) 2023-2025 Institute of Computing Technology, Chinese Academy of Sciences
// Copyright (c) 2023-2025 Beijing Institute of Open Source Chip
//
// iMAP-FPGA is licensed under Mulan PSL v2.
// You can use this software according to the terms and conditions of the Mulan PSL v2.
// You may obtain a copy of Mulan PSL v2 at:
// http://license.coscl.org.cn/MulanPSL2
//
// THIS SOFTWARE IS PROVIDED ON AN "AS IS" BASIS, WITHOUT WARRANTIES OF ANY KIND,
// EITHER EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO NON-INFRINGEMENT,
// MERCHANTABILITY OR FIT FOR A PARTICULAR PURPOSE.
//
// See the Mulan PSL v2 for more details.
// ***************************************************************************************
decimal_digits = { ASCII_DIGIT }
// bus_index  = _{ "[" ~ decimal_digits+ ~ "]" }
bus_slice = { "[" ~ decimal_digits+ ~ ":" ~ decimal_digits+ ~ "]" }

scalar_constant = { "1'b0" | "1'b1" | "1'B0" | "1'B1" | "'b0" | "'b1" | "'B0" | "'B1" | "1" | "0" }

line_comment      = _{ "//" ~ (!("\n") ~ ASCII)* ~ ("\n" | EOI) }
multiline_comment = _{ "/*" ~ (!"*/" ~ ANY)* ~ "*/" }
COMMENT           = _{ line_comment | multiline_comment }

char = _{ ASCII_ALPHANUMERIC | "_" | "\\" | "[" | "]" | "/" }

port_or_wire_id = { char+ }
port_list       = { port_or_wire_id ~ ("," ~ port_or_wire_id)* }
// To do (.v before DC)
// port_bus_list
wire_list                            =  { port_or_wire_id ~ ("," ~ port_or_wire_id)* }
first_wire_list_with_scalar_constant = _{ scalar_constant | port_or_wire_id }
next_wire_list_with_scalar_constant  = _{ (("," ~ scalar_constant) | ("," ~ port_or_wire_id))* }
wire_list_with_scalar_constant       = _{ first_wire_list_with_scalar_constant ~ next_wire_list_with_scalar_constant }

inst_or_cell_id = @{ char+ }
module_id       =  { char+ }
WHITESPACE      = _{ " " | "\t" | "\r" | "\n" }
semicolon_opt   = _{ ";" }

input_declaration      =  { "input" ~ bus_slice? ~ port_list ~ semicolon_opt }
output_declaration     =  { "output " ~ bus_slice? ~ port_list ~ semicolon_opt }
inout_declaration      =  { "inout " ~ bus_slice? ~ port_list ~ semicolon_opt }
port_declaration       = _{ input_declaration | output_declaration | inout_declaration }
port_block_declaration =  { port_declaration+ }

wire_declaration       = { "wire " ~ bus_slice? ~ wire_list ~ semicolon_opt }
wire_block_declaration = { wire_declaration+ }

// (ps:first_port_connection) first rule adapt to .REN(n_Logic1_ ) or .REN( ) or .io_interrupt(1'b0)
// (ps:first_port_connection) second rule adapt to .FBDIV({  \u0_rcg/n33 ,  \u0_rcg/n33 ,  \u0_rcg/n33 })
// (ps:first_port_connection) or .io_master_bid({ 1'b0,1'b0,io_master_bid_041461 }) (begin)
// or .io_master_bresp({ io_master_bresp_041461_1_, 1'b0 }) (end) or .rid_nic400_axi4_ps2({ 1'b0,1'b0,rid_nic400_axi4_ps2_1_,1'b0 }) (begin_end)
first_port_connection_single_connect   =  { "." ~ port_or_wire_id ~ "(" ~ (scalar_constant | port_or_wire_id)? ~ ")" }
first_port_connection_multiple_connect =  { "." ~ port_or_wire_id ~ "(" ~ "{" ~ wire_list_with_scalar_constant ~ "}" ~ ")" }
first_port_connection                  = _{ first_port_connection_single_connect | first_port_connection_multiple_connect }
port_connection                        = _{ "," ~ first_port_connection }
port_block_connection                  = !{ "(" ~ first_port_connection? ~ port_connection* ~ ")" ~ semicolon_opt }

inst_declaration       = ${ inst_or_cell_id ~ WHITESPACE+ ~ inst_or_cell_id ~ WHITESPACE* ~ port_block_connection }
inst_block_declaration =  { inst_declaration+ }

module_declaration = {
    "module" ~ module_id ~ "(" ~ port_list ~ ");" ~ port_block_declaration ~ wire_block_declaration ~ inst_block_declaration ~ "endmodule"
}

verilog_file = _{ SOI ~ module_declaration+ ~ EOI }
